#BlueJ class context
comment0.params=
comment0.target=Tree()
comment0.text=\r\n\ A\ new\ tree\ is\ empty\ when\ created,\ so\ its\ root\ is\ null\r\n
comment1.params=
comment1.target=TreeNode\ getRoot()
comment1.text=\r\n\ Important\ method\ for\ the\ Menu\ class\ used\ to\ retrieve\ the\ root\ of\ the\ tree\ and\ verify\ if\ it\ is\ null.\ Necessary\ as\ TreeNode\ root\ has\ private\ access.\r\n\ \r\n\ @return\ root\ -\ the\ root\ TreeNode\ of\ the\ tree\r\n
comment10.params=subRoot
comment10.target=void\ printPostOrder(TreeNode)
comment10.text=\r\n\ Used\ to\ print\ the\ contents\ of\ the\ tree\ in\ postorder\ format\r\n\ \r\n\ @param\ subRoot\ -\ the\ root\ of\ the\ subtree\ currently\ being\ evaluated.\ Starts\ as\ the\ root\ of\ the\ tree,\ and\ changes\ as\ the\ program\ traverses\ left\ and\ right\r\n
comment2.params=newRoot
comment2.target=void\ setRoot(TreeNode)
comment2.text=\r\n\ Used\ to\ change\ the\ root\ in\ the\ event\ that\ the\ original\ root\ is\ removed.\r\n\ \r\n\ @param\ newRoot\ -\ the\ TreeNode\ that\ is\ going\ to\ become\ the\ new\ root\r\n
comment3.params=id\ mark
comment3.target=void\ addToTree(int,\ int)
comment3.text=\r\n\ Used\ to\ create\ a\ new\ instance\ of\ the\ TreeNode\ class,\ define\ its\ fields,\ and\ determine\ where\ it\ belongs\ in\ the\ tree.\r\n\ \r\n\ @param\ id\ -\ the\ ID\ of\ the\ student\ that\ the\ user\ defines\r\n\ @param\ mark\ -\ the\ mark\ of\ the\ student\ that\ the\ user\ defines\r\n
comment4.params=subRoot
comment4.target=void\ printInOrder(TreeNode)
comment4.text=\r\n\ Used\ to\ print\ the\ contents\ of\ the\ tree\ in\ numerical\ order\ of\ ID.\r\n\ \r\n\ @param\ subRoot\ -\ the\ root\ of\ the\ subtree\ currently\ being\ evaluated.\ Starts\ as\ the\ root\ of\ the\ tree,\ and\ changes\ as\ the\ program\ traverses\ left\ and\ right\r\n
comment5.params=subRoot\ searchID
comment5.target=void\ findNode(TreeNode,\ int)
comment5.text=\r\n\ Used\ to\ search\ for\ a\ specific\ node\ by\ their\ ID.\r\n\ \r\n\ @param\ subRoot\ -\ the\ root\ of\ the\ subtree\ currently\ being\ evaluated.\ Starts\ as\ the\ root\ of\ the\ tree,\ and\ changes\ as\ the\ program\ traverses\ left\ and\ right\r\n\ @param\ searchID\ -\ the\ ID\ the\ user\ is\ searching\ for\r\n
comment6.params=subRoot\ searchID
comment6.target=void\ remove(TreeNode,\ int)
comment6.text=\r\n\ Used\ to\ remove\ a\ node\ from\ the\ tree.\r\n\ \r\n\ @param\ subRoot\ -\ the\ root\ of\ the\ subtree\ currently\ being\ evaluated.\ Starts\ as\ the\ root\ of\ the\ tree,\ and\ changes\ as\ the\ program\ traverses\ left\ and\ right\r\n\ @param\ searchID\ -\ the\ ID\ of\ the\ node\ the\ user\ wants\ to\ delete\r\n
comment7.params=subRoot
comment7.target=TreeNode\ getHighestLeft(TreeNode)
comment7.text=\r\n\ Used\ to\ return\ the\ node\ with\ the\ largest\ ID\ on\ the\ left\ hand\ side\ of\ the\ tree,\ used\ to\ set\ a\ new\ root\ when\ the\ old\ root\ is\ being\ deleted\r\n\ \r\n\ @param\ subRoot\ -\ the\ root\ of\ the\ subtree\ currently\ being\ evaluated\r\n\ @return\ getHighestLeft\ -\ the\ node\ with\ the\ highest\ value\ of\ ID\r\n
comment8.params=subRoot
comment8.target=TreeNode\ getSmallestRight(TreeNode)
comment8.text=\r\n\ Used\ to\ return\ the\ node\ with\ the\ smallest\ ID\ on\ the\ right\ hand\ side\ of\ the\ tree,\ used\ to\ set\ a\ new\ root\ when\ the\ old\ root\ is\ being\ deleted\r\n\ \r\n\ @param\ subRoot\ -\ the\ root\ of\ the\ subtree\ currently\ being\ evaluated\r\n\ @return\ getSmallestRight\ -\ the\ node\ with\ the\ lowest\ value\ of\ ID\r\n
comment9.params=subRoot
comment9.target=void\ printPreOrder(TreeNode)
comment9.text=\r\n\ Used\ to\ print\ the\ contents\ of\ the\ tree\ in\ preorder\ format\r\n\ \r\n\ @param\ subRoot\ -\ the\ root\ of\ the\ subtree\ currently\ being\ evaluated.\ Starts\ as\ the\ root\ of\ the\ tree,\ and\ changes\ as\ the\ program\ traverses\ left\ and\ right\r\n
numComments=11
